language: c
sudo: required

branches:
  only:
  - master

matrix:
  include:
    - os: linux
      dist: trusty
    - os: osx

services:
  - docker

stages:
  - name: deploy
    # require the branch name to be master (note for PRs this is the base branch name)
    if: branch = master

stages:
  - name:  osx-test
     if: os = osx
  
  - name: ubuntu-test  
     if: os = linux
     jobs:
      include:
        - stage: test  
          before_install:
            - sudo apt-get update
            - sudo apt-get upgrade lxc-docker
            #- echo 'DOCKER_OPTS="-H tcp://127.0.0.1:2375 -H unix:///var/run/docker.sock -s devicemapper"' | sudo tee /etc/default/docker > /dev/null
            - sudo service docker restart
            - sleep 5
            - sudo docker pull ubuntu:trusty
            - sudo docker create --privileged=true -t --name "docker-you-wanted"  "image-you-wanted"
            - sudo docker start "docker-you-wanted"
            - sudo docker exec -t "docker-you-wanted" /bin/bash -c "apt-get update"
            - sudo docker exec -t "docker-you-wanted" 
                    /bin/bash -c "apt-get install -y --no-install-recommends 
                    curl \
                    sudo \
                    build-essential \
                    gcc-arm-none-eabi \
                    libnewlib-arm-none-eabi \
                    libboost-all-dev \
                    pkg-config \
                    python3 \
                    python3-pip \
                    python3-setuptools \
                    libgoogle-glog-dev \
                    libgtest-dev \
                    libiomp-dev \
                    libleveldb-dev \
                    liblmdb-dev \
                    libopencv-dev \
                    libopenmpi-dev \
                    libsnappy-dev \
                    libprotobuf-dev \
                    openmpi-bin \
                    openmpi-doc \
                    libgflags-dev \
                    automake \
                    libtool \
                    xz-utils \
                    make \
                    cmake \
                    g++ \
                    python \
                    llvm-5.0-tools \
                    git \
                    protobuf-compiler \
                    libprotoc-dev \
                    python-pip \
                    python-dev \
                    python-setuptools \
                    bison \
                    flex \
                    ninja-build \
                    cmake-curses-gui \
                    clang-5.0 \
                    clang-tidy-5.0 \
                    clang-format-5.0 \
                    gcovr"

            - sudo docker exec -t "docker-you-wanted" /bin/bash -c "rm -rf /var/lib/apt/lists/*"
            - sudo docker exec -t "docker-you-wanted" /bin/bash -c "pip install future numpy protobuf lit"
            - sudo docker exec -t "docker-you-wanted" /bin/bash -c "pip3 install jinja2"
            - sudo docker exec -t "docker-you-wanted" /bin/bash -c "pip3 install jinja2"

            - sudo docker exec -t "docker-you-wanted" /bin/bash -c "git clone https://github.com/ONNC/umbrella.git"
            - sudo docker exec -t "docker-you-wanted" /bin/bash -c "git submodule init"
            - sudo docker exec -t "docker-you-wanted" /bin/bash -c "git submodule update"
            - sudo docker exec -t "docker-you-wanted" /bin/bash -c "mkdir ./umbrella/onnc-build"
            - sudo docker exec -t "docker-you-wanted" /bin/bash -c "./umbrella/build.sh dbg ./umbrella/onnc-build"

           
          script:
          # Run tests in Container
          - sudo docker exec -t  "docker-you-wanted" /bin/bash -c "command-you-wanted"

notifications:
  email: false


